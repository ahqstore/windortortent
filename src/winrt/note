use windows::{Management::Deployment::PackageManager, Win32::{Foundation::HANDLE, Security::{Authorization::ConvertSidToStringSidW, GetTokenInformation, TokenUser, TOKEN_QUERY, TOKEN_USER}, System::Threading::{GetCurrentProcess, OpenProcessToken}}};
use windows_core::{Result, HSTRING, PWSTR};

pub mod msixbundle;

pub fn get_user_sid_string() -> Option<HSTRING> {
  unsafe {
    let mut token_handle: HANDLE = HANDLE::default();

    OpenProcessToken(
      GetCurrentProcess(),
      TOKEN_QUERY,
      &mut token_handle
    ).ok()?;

    let mut len = 300;

    let mut info = vec![0u8; len as usize];

    GetTokenInformation(
      token_handle,
      TokenUser,
      Some(info.as_mut_ptr() as _),
      len,
      &mut len
    ).unwrap();

    let mut sid = PWSTR::default();

    let info = &mut info[0usize..(len as usize)];

    let info = info.as_mut_ptr() as *mut TOKEN_USER;

    let val = (&mut *info).User.Sid;

    ConvertSidToStringSidW(val, &mut sid).unwrap();

    Some(sid.to_hstring())
  }
}

fn main() -> Result<()> {
  let man = PackageManager::new()?;

  msixbundle::parse(r#"E:\rust\test-uwp\app.Msixbundle"#).unwrap();

  let data = man.FindPackagesByUserSecurityIdNamePublisher(
    &get_user_sid_string().unwrap(),
    &HSTRING::from("FACEBOOK.FACEBOOK"),
    &HSTRING::from("CN=6E08453F-9BA7-4311-999C-D22FBA2FB1B8"),
  )?;

  data.into_iter()
    .for_each(|x| {
      println!("{:#?}", x.DisplayName().unwrap());
      
    });

  Ok(())
}
